---
format: html
editor: visual
  markdown: 
    wrap: 72
---

Vasmos a cargar el dataset de AirBnB descargado de [aquí](https://public.opendatasoft.com/explore/dataset/airbnb-listings/export/?disjunctive.host_verifications&disjunctive.amenities&disjunctive.features&q=Madrid&dataChart=eyJxdWVyaWVzIjpbeyJjaGFydHMiOlt7InR5cGUiOiJjb2x1bW4iLCJmdW5jIjoiQ09VTlQiLCJ5QXhpcyI6Imhvc3RfbGlzdGluZ3NfY291bnQiLCJzY2llbnRpZmljRGlzcGxheSI6dHJ1ZSwiY29sb3IiOiJyYW5nZS1jdXN0b20ifV0sInhBeGlzIjoiY2l0eSIsIm1heHBvaW50cyI6IiIsInRpbWVzY2FsZSI6IiIsInNvcnQiOiIiLCJzZXJpZXNCcmVha2Rvd24iOiJyb29tX3R5cGUiLCJjb25maWciOnsiZGF0YXNldCI6ImFpcmJuYi1saXN0aW5ncyIsIm9wdGlvbnMiOnsiZGlzanVuY3RpdmUuaG9zdF92ZXJpZmljYXRpb25zIjp0cnVlLCJkaXNqdW5jdGl2ZS5hbWVuaXRpZXMiOnRydWUsImRpc2p1bmN0aXZlLmZlYXR1cmVzIjp0cnVlfX19XSwidGltZXNjYWxlIjoiIiwiZGlzcGxheUxlZ2VuZCI6dHJ1ZSwiYWxpZ25Nb250aCI6dHJ1ZX0%3D&location=16,41.38377,2.15774&basemap=jawg.streets)

![](descargar.png)

```{r}
airbnb<-read.csv('airbnb-listings.csv',sep = ';')
options(repr.plot.height=4,repr.plot.width=6,repr.plot.res = 300)
```

1.  Vamos a quedarnos con las columnas de mayor interés: 'City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude' Nos quedarmos solo con las entradas de Madrid para Room.Type=="Entire home/apt" y cuyo barrio (Neighbourhood) no está vacio '' Podemos eliminar las siguientes columnas que ya no son necesarias: "Room.Type",'City' Llama a nuevo dataframe df_madrid.

```{r}
require(dplyr)
airbnb_selected<-airbnb[,c('City','Room.Type','Neighbourhood','Accommodates','Bathrooms','Bedrooms','Beds','Price','Square.Feet','Guests.Included','Extra.People','Review.Scores.Rating','Latitude', 'Longitude')]

df_madrid<-filter(airbnb_selected, City=='Madrid', Room.Type == 'Entire home/apt', Neighbourhood!='')
df_madrid <- df_madrid %>%
              select(-Room.Type,-City)
```

------------------------------------------------------------------------

2.  Crea una nueva columna llamada Square.Meters a partir de Square.Feet. Recuerda que un pie cuadrado son 0.092903 metros cuadrados.

```{r}

df_madrid$Square.Meters = df_madrid$Square.Feet*0.092903
  
```

------------------------------------------------------------------------

3.  ¿Que porcentaje de los apartamentos no muestran los metros cuadrados? Es decir, ¿cuantos tienen NA en Square.Meters?

```{r}
total_na <- sum(is.na(df_madrid$Square.Meters))
total_madrid <- nrow(df_madrid)
porcentaje <- round(total_na / total_madrid * 100,2)

paste("Hay un total de ", total_na ,"NA de un total de", total_madrid)
paste("Es un", porcentaje,"%")
```

------------------------------------------------------------------------

4.  De todos los apartamentos que tienen un valor de metros cuadrados diferente de NA ¿Que porcentaje de los apartamentos tienen 0 metros cuadrados?

```{r}
cero <- df_madrid %>%
  filter(Square.Meters=="0")

omitido <- total_madrid - total_na

porc= round(nrow(cero) / omitido * 100,2)

paste("Hay un total de ",porc ,"% de departamentos que tienen 0 metros cuadrados en su descripción")
```

------------------------------------------------------------------------

5.  Reemplazar todos los 0m\^2 por NA

```{r}
df_madrid$Square.Meters[df_madrid$Square.Meters==0] <- NA

```

------------------------------------------------------------------------

Hay muchos NAs, vamos a intentar crear un modelo que nos prediga cuantos son los metros cuadrados en función del resto de variables para tratar de rellenar esos NA. Pero **antes de crear el modelo** vamos a hacer:

\* pintar el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más.

\* crear una variable sintética nueva basada en la similitud entre barrios que usaremos en nuestro modelo.

6.  Pinta el histograma de los metros cuadrados y ver si tenemos que filtrar algún elemento más

```{r}
hist(df_madrid$Square.Meters)

```

------------------------------------------------------------------------

7.  Asigna el valor NA a la columna Square.Meters de los apartamentos que tengan menos de 20 m\^2

```{r}
df_madrid$Square.Meters[df_madrid$Square.Meters<20] <-NA
hist(df_madrid$Square.Meters)

```

------------------------------------------------------------------------

8.  Existen varios Barrios que todas sus entradas de Square.Meters son NA, vamos a eliminar del dataset todos los pisos que pertenecen a estos barrios.

    ```{r}
    library(dplyr)
    df_num_na <-df_madrid |> group_by(Neighbourhood) |> summarise(num_na=sum(is.na(Square.Meters)), num_total=n())

    ```

    ```{r}
    barrios_eliminar <- df_num_na[df_num_na$num_na==df_num_na$num_total,]$Neighbourhood
    #a nuevo dataframe <- si del dataframe[esta columna es equivalente a esta otra columna]
    df_madrid <- df_madrid[!(df_madrid$Neighbourhood %in% barrios_eliminar),]
    #df general <- df[MENOS columna que esté en el otro dataframe]
    ```

    ------------------------------------------------------------------------

9.  ¿Tienen todos los barrios los mismos metros cuadrados de media? ¿Con que test lo comprobarías?

    Primero se comprueba con un test de shapiro por cada barrio para ver si todos siguen una distribución normal

    ```{r}
    #Se convierte a factor la columna Neighbourhood
    df_madrid$Neighbourhood <- as.factor(df_madrid$Neighbourhood)

    shapiro_test_results <- vector("list", length(levels(df_madrid$Neighbourhood)))

    seleccion <- list()

    for (barrio in levels(df_madrid$Neighbourhood)){
      #para cada barrio en Neighbourhood (se puede revisar con unique(df$col)
      seleccion <- na.omit(df_madrid$Square.Meters[df_madrid$Neighbourhood == barrio])
      #revisamos el tamaño de la muestra
      if(length(seleccion)<3 || length(seleccion)> 5000){
        cat("El tamaño de la muestra para el grupo", barrio, "está fuera del rango para evaluar \n")
      }else{
      #se realiza entonces el test de Shapiro
        shapiro_test_result <- shapiro.test(seleccion)
        shapiro_test_results[[barrio]] <- shapiro_test_result 
      
      #resultados y manejo de ellos
      if(shapiro_test_result$p.value < 0.05){
        cat("Para el grupo", barrio, "p < 0.05, es decir, no sigue una distribución normal, P-valor:", shapiro_test_result$p.value, "\n")
        break
      }else{
      cat("Para el grupo", barrio, "p > 0.05, es decir, sigue una distribución normal, P-valor:", shapiro_test_result$p.value, "\n")
        }
      }
    }

    ```

    Con el barrio Almenara ya se descarta un análisis ANOVA, debido a que no sigue una distribución normal, por lo tanto se debe realizar un test de Kruskal

    ```{r}
    kruskal_result <- kruskal.test(Square.Meters ~ Neighbourhood, data = df_madrid)
    kruskal_result
    ```

    De la salida se desprende lo siguiente:

    chi-squared corresponde a la estadistica de prueba del test, la cual mide la diferencia entre las medianas de los grupos, en este caso el valor es 60.002

    df son los grados de libertad (al tener 38 barrios, son 37 grados de libertad)

    p-value = es una medida de la evidencia en contra de la hipotesis nula, en este caso el valor es 0.009755, lo cual indica que hay evidencia significativa para rechazar la hipotesis nula "las medianas de Square.Meters agrupadas por Neighbourhood son iguales en todos los grupos" es decir, hay una difrencia significativa

    ------------------------------------------------------------------------

10. Vamos a agrupar los barrios por metros cuadrados. Podemos usar una matriz de similaridad de Tukey. Muestra como de similares o diferentes son los barrios si nos fijámos únicamente en los metros cuadrados de los pisos. ¿Como se diferencia la media del Barrio A al Barrio B? (Es decir, cual sería el pvalor suponiendo una H0 en la que las medias son iguales)

```{r}
library(agricolae)

tukey_results <- TukeyHSD(aov(Square.Meters ~ Neighbourhood, data = df_madrid))
#resultados test de tukey <- tukey(anova(m2 en funcion del barrio, de df_madrid))
tukey_results<-data.frame(tukey_results$Neighbourhood)
#se sobreescribe la variable para pasarla a df

#column names <- ordenadas(unica(barrio))
cn <-sort(unique(df_madrid$Neighbourhood))

#matriz cuadrada llena con NA, cuadrada de dimensiones cn x cn
resm <- matrix(NA, length(cn),length(cn))

#renombrar filas y columnas con los valores unicos de Neighbourhood (cn)
rownames(resm) <- cn 
colnames(resm) <- cn

#se rellena la matriz con los datos, primero con el triangulo inferior, siendo los resultados tukey
#NA NA  NA
#tk NA  NA
#tk tk  NA
resm[lower.tri(resm) ] <- round(tukey_results$p.adj,4)

#Luego, al triangulo superior se rellena con los mismos datos inferiores, pues se traspone la matriz

#NA tk  tk
#tk NA  tk
#tk tk  NA
resm[upper.tri(resm) ] <- t(resm)[upper.tri(resm)]


diag(resm) <- 1
#Y finalmente se rellena la diagonal con 1 (pues serán los mismos barrios)
#1 tk  tk
#tk 1  tk
#tk tk  1

library(ggplot2)
library(reshape2)

dfResm <- melt(resm)
ggplot(dfResm, aes(x=Var1, y=Var2, fill=value))+
  geom_tile(colour = "black")+
  geom_text(aes(label=paste(round(value*100,0),"%")),size = 3) +
  scale_fill_gradient(low = "white",high = "steelblue")+
  ylab("Class")+xlab("Class")+theme_bw()+
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
        axis.text.y = element_text(vjust = 0.5),
        plot.title = element_text(hjust = 0.5)) +
  coord_fixed() +
  guides(fill = FALSE)

```

------------------------------------------------------------------------

11. En el punto anterior has creado una matriz de p-valores que indica como de parecidos son dos barrios. Si su pvalor es alto significa que los barrios son diferentes, si es bajo significa que los barrios se parecen. Esta matriz la podemos usar como matriz de distancia si restamos el pvalor a 1. Es decir si usamos como distancia 1-pvalor. De esta forma barrios con un pvalor alto tendrán una distancia mayor que aquellos con un pvalor bajo. Usando esta última métrica como matriz de distancias dibuja un dendrograma de los diferentes barrios.

    ```{r}
    distancia <- 1 - resm
    #matriz distancia es 1- valoresp, que están en resm. si distancia 0, gran correlación, si distancia 1, gran difrencia entre barrios
    distancia <- as.dist(distancia)
    #as.dist para poder trabajarlo en clusters
    main.tree <- hclust(distancia, method="complete")
    main.dend <- as.dendrogram(main.tree)

    plot(main.dend, main = "Dendrograma de Barrios", xlab = "Barrios", ylab = "Distancia = 1 - p-valor")
    ```

------------------------------------------------------------------------

12. ¿Que punto de corte sería el aconsejable?, ¿cuantos clusters aparecen?

    ```{r}
    library(dendextend)
    b <- 0.4
    clusters <- cutree(main.tree, h=b)
    num_clusters <- length(unique(clusters))
    plot(color_branches(main.dend, h=b), leaflab="perpendicular")
    #linea de corte
    abline(h = b, col = "black", lty = 4)
    cat("Numero de clusters:", num_clusters)
    ```

```{r}
df_clusters <- data.frame(Neighbourhood = names(clusters), Cluster = clusters)
df_madrid <- merge(df_madrid, df_clusters, by = "Neighbourhood")

print(df_madrid)
```

------------------------------------------------------------------------

13. Vamos a crear una nueva columna en el dataframe df_madrid con un nuevo identificador marcado por los clusters obtenidos. Esta columna la llamaremos neighb_id

```{r}
names(df_madrid)[names(df_madrid) == "Cluster"] <- "neighb_id"
df_madrid$neighb_id <- factor(clusters[df_madrid$Neighbourhood])
```

------------------------------------------------------------------------

12. Vamos a crear dos grupos, uno test y otro train.

    ```{r}
    df_madrid$Neighbourhood <- as.factor(df_madrid$Neighbourhood)
        idx<-sample(1:nrow(df_madrid),nrow(df_madrid)*0.7)
        df_train <- df_madrid[idx, ]
        df_test <- df_madrid[-idx, ]
    ```

------------------------------------------------------------------------

13. Tratamos de predecir los metros cuadrados en función del resto de columnas del dataframe.

    ```{r}
    model <- lm(Square.Meters ~ Accommodates+Bathrooms+Bedrooms+Beds+Price+neighb_id, data = df_train)

    summary(model)
    confint(model)
    ```

------------------------------------------------------------------------

14. Evaluar la calidad de vuestro modelo

```{r}
prediction <- predict(model, newdata = df_test)
mse <- mean((df_test$Square.Meters - prediction)^2, na.rm = TRUE)
rmse <- sqrt(mse)
cat("RMSE:", rmse)
print(model)
```

------------------------------------------------------------------------

15. Si tuvieramos un anuncio de un apartamento para 6 personas (Accommodates), con 1 baño, con un precio de 80€/noche y 3 habitaciones en el barrio de Sol, con 3 camas y un review de 80. ¿Cuantos metros cuadrados tendría? Si tu modelo necesita algúna variable adicional puedes inventartela dentro del rango de valores del dataset. ¿Como varía sus metros cuadrados con cada habitación adicional?

    ```{r}
    nuevo <- data.frame(Accommodates = 6,
                        Bathrooms = 1,
                        Bedrooms = 3,
                        Price = 80,
                        neighb_id = unique(df_madrid$neighb_id[df_madrid$Neighbourhood == "Sol"]),
                        Beds = 3
                        )
    predicted_sqm <- predict(model, newdata = nuevo)

    cat("El modelo predice que para tales condiciones, el apartamento será de", predicted_sqm, "m^2")
    ```

------------------------------------------------------------------------

16. Rellenar los Square.Meters con valor NA con el estimado con el modelo anterior.

```{r}
df_madrid$Square.Meters[is.na(df_madrid$Square.Meters)] <- predict(model,df_madrid[is.na(df_madrid$Square.Meters),])
```

------------------------------------------------------------------------
